from google.colab import drive
drive.mount('/content/drive')
     
Mounted at /content/drive

import gdown

# Die Datei-ID aus dem Google Drive-Link
file_id = '1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q'
destination = '/content/deine_datei.csv'

# Datei herunterladen
gdown.download(f'https://drive.google.com/uc?id={file_id}', destination, quiet=False)
     
Downloading...
From (original): https://drive.google.com/uc?id=1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q
From (redirected): https://drive.google.com/uc?id=1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q&confirm=t&uuid=72372d57-b035-4fd8-8e0a-726833ed8081
To: /content/deine_datei.csv
100%|██████████| 1.90G/1.90G [00:19<00:00, 99.7MB/s]
'/content/deine_datei.csv'

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
     

# Lade die heruntergeladene CSV-Datei
df = pd.read_csv('/content/deine_datei.csv')

# Zeige die ersten paar Zeilen der Datei an
print(df.head(10))

from google.colab import drive
drive.mount('/content/drive')
     
Mounted at /content/drive

import gdown

# Die Datei-ID aus dem Google Drive-Link
file_id = '1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q'
destination = '/content/deine_datei.csv'

# Datei herunterladen
gdown.download(f'https://drive.google.com/uc?id={file_id}', destination, quiet=False)
     
Downloading...
From (original): https://drive.google.com/uc?id=1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q
From (redirected): https://drive.google.com/uc?id=1VB_9wbmdneUo32XGGDNULnUZje4HsX8Q&confirm=t&uuid=72372d57-b035-4fd8-8e0a-726833ed8081
To: /content/deine_datei.csv
100%|██████████| 1.90G/1.90G [00:19<00:00, 99.7MB/s]
'/content/deine_datei.csv'

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
     
# Lade die heruntergeladene CSV-Datei
df = pd.read_csv('/content/deine_datei.csv')

# Zeige die ersten paar Zeilen der Datei an
print(df.head(10))

# Datum umwandeln und Monat extrahieren
df['ABFAHRTSZEIT'] = pd.to_datetime(df['ABFAHRTSZEIT'], errors='coerce')
df['Monat'] = df['ABFAHRTSZEIT'].dt.month

# Durchschnittliche Verspätung pro Monat berechnen
df_monate = df.groupby('Monat')['VERSPAETUNG [s]'].mean().reset_index()
df_monate['Monat'] = df_monate['Monat'].apply(lambda x: calendar.month_abbr[x])

# Plot: Durchschnittliche Verspätung pro Monat
plt.figure(figsize=(10,5))
sns.barplot(data=df_monate, x='Monat', y='VERSPAETUNG [s]', palette='Blues_d')
plt.title("Durchschnittliche Verspätung pro Monat")
plt.xlabel("Monat")
plt.ylabel("Verspätung [s]")
plt.show()

# Plot: Verspätung vs. Neuschneehöhe
plt.figure(figsize=(10,5))
sns.scatterplot(data=df, x='NEUSCHNEEHOEHE [cm]', y='VERSPAETUNG [s]')
plt.title("Verspätung in Abhängigkeit von Neuschnee")
plt.xlabel("Neuschneehöhe [cm]")
plt.ylabel("Verspätung [s]")
plt.show()

# Plot: Verspätung vs. Gesamtschneehöhe (Morgenmessung)
plt.figure(figsize=(10,5))
sns.scatterplot(data=df, x='SCHNEHOEHE_MORGENMESSUNG_6_UTC [cm]', y='VERSPAETUNG [s]')
plt.title("Verspätung in Abhängigkeit von Gesamtschneehöhe")
plt.xlabel("Schneehöhe [cm]")
plt.ylabel("Verspätung [s]")
plt.show()

# ===========================================
# Verspätung in Abhängigkeit der Windgeschwindigkeit
# Ziel: Herausfinden, ob starke Winde die Verspätung beeinflussen
# ===========================================

plt.figure(figsize=(10,5))
sns.scatterplot(data=df, x='WINDGESCHWINDIGKEIT [kmh]', y='VERSPAETUNG [s]')
plt.title("Verspätung in Abhängigkeit von Windgeschwindigkeit")
plt.xlabel("Windgeschwindigkeit [km/h]")
plt.ylabel("Verspätung [s]")
plt.show()

# ===========================================
# 🌫️ Verspätung bei Wetterextremen: Hagel & Nebel
# Ziel: Durchschnitts-Verspätung bei besonderen Wetterlagen
# ===========================================

# Durchschnitts-Verspätung bei Hagel, Nebel, und ohne beides
hagel = df[df['TAG_MIT_HAGEL'] == 1]['VERSPAETUNG [s]'].mean()
nebel = df[df['TAG_MIT_NEBEL'] == 1]['VERSPAETUNG [s]'].mean()
normal = df[(df['TAG_MIT_HAGEL'] == 0) & (df['TAG_MIT_NEBEL'] == 0)]['VERSPAETUNG [s]'].mean()

# Ergebnisse ausgeben
print(f"Ø Verspätung ohne Extremwetter: {normal:.2f} s")
print(f"Ø Verspätung bei Hagel: {hagel:.2f} s")
print(f"Ø Verspätung bei Nebel: {nebel:.2f} s")

# Diagramm: Vergleich
plt.figure(figsize=(8,5))
plt.bar(['Normal', 'Hagel', 'Nebel'], [normal, hagel, nebel], color=['green', 'red', 'gray'])
plt.title("Durchschnittliche Verspätung bei Extremwetter")
plt.ylabel("Verspätung [s]")
plt.show()

# ===========================================
# 📊 Monatsvergleich: Wettertrends & Verspätung
# Ziel: Wie verändern sich Verspätung, Temperatur und Schneemenge über das Jahr?
# ===========================================

# Mittelwerte je Monat berechnen
monatlich = df.groupby('Monat')[['VERSPAETUNG [s]', 'TEMPERATUR [°C]', 'NEUSCHNEEHOEHE [cm]']].mean().reset_index()
monatlich['Monat_name'] = monatlich['Monat'].apply(lambda x: calendar.month_abbr[x])

# Diagramm erstellen mit zwei Y-Achsen
fig, ax1 = plt.subplots(figsize=(12,6))

# Verspätung und Temperatur auf erster Achse
sns.lineplot(data=monatlich, x='Monat_name', y='VERSPAETUNG [s]', label='Verspätung [s]', ax=ax1)
sns.lineplot(data=monatlich, x='Monat_name', y='TEMPERATUR [°C]', label='Temperatur [°C]', ax=ax1)

# Zweite Y-Achse für Schnee
ax2 = ax1.twinx()
sns.lineplot(data=monatlich, x='Monat_name', y='NEUSCHNEEHOEHE [cm]', label='Neuschnee [cm]', ax=ax2, color='blue', linestyle='dashed')

# Achsentitel & Legenden
ax1.set_xlabel("Monat")
ax1.set_ylabel("Verspätung")
